/* global L: false */
/*
 * I didn't originally write any of this mapper thing ... why is a long story full of
 * humor, SMH, and waiting in the wings with a lot of software development work output
 * already done and in my pocket in anticipation of the day when I would only whisper
 * to myself, "I knew it."
 *
 * Anyway, the point is, I ended up having to mod someone else's code using libraries and
 * concepts I really didn't know anything about at the time.  So, some of this could
 * definitely be better, and most of it is NOT in my preferred coding style -- those
 * open braces on the end of the line! ARRRRGH!  WHY?!
 *
 * So, someday, if that day comes before I die or retire, I will rewrite this, but for
 * now, here is this pretty little mess....
 *                                ~ Scott Hammel, heir of the codebase
 *
 */

$(document).ready(function () {
  // some options/defaults
  var smallffthreshold = "768px"; // size below which is a small screen size view .. I think?.  I don't know what ff stands for.
  var searchBase = "//openparksnetwork.org/oai/geodigger.php"; // this is the OAI-PMH data provider custom GeoJSON search interface. At time of writing this comment, there are two instances: one for OPN and one for DC.  DC's is commented out here.
  //var searchBase="//digitalcollections.clemson.edu/oai/geodigger.php"; // DC search interface
  //var searchBase="//lsdev.clemson.edu/oai/geodigger.php"; // dev/test server
  var args = qargs; // qargs is set in index.html.  It is constructed from the URL's query arguments.
  var kwds = args["k"]; // keywords used in the search that landed here, if any
  var searchzoom = args["z"]; // map initial zoom level
  var pgsize = args["p"]; // max number of search hits

  var searchbar = true; // whether or not to display a search bar at the top of the view (true == display it)
  var searchcarousel = true; // whether or not to display the thumbnail carousel scrolly thing at the bottom of the view (true == display it)
  if (numqargs > 0) {
    searchbar = args["b"] === "yes";
    searchcarousel = args["c"] === "yes";
  }

  if (!searchbar) {
    $(".navbar").css("display", "none");
    $(".main-container").css("top", "0px");
    $(".toggle-menu").css("top", "-50px");
  } else {
    $(".sidebar-menu, .main-container").toggleClass("menu-open");
  }

  /* ==== Set up map ==== */
  // define some defaults and constants
  const apiKey =
    "AAPK0bfa2556b4ac4284a310e6985efc4ae5pYNpvJ67IqNlYANJ4031LBMSxrep5AnzG6WREaLTdjqMGhyo5umNYpY1SMrqCGP4";
  var init_mapzoom = 8;
  var init_map_lat = 34.2;
  var init_map_lng = -82.0;
  var map_maxzoom = 16;

  // establish the initial map object.
  var map = L.map("map").setView([init_map_lat, init_map_lng], init_mapzoom);
  map.setMaxZoom(map_maxzoom);

  // initially, only ESRI's services were supported, but I later made that optional.
  // Here is where the map layer provider-specific stuff is coded

  // http://esri.github.io/esri-leaflet/examples/switching-basemaps.html
  if (MapProviderOption == "ESRI") {
    var layer = L.esri.Vector.vectorBasemapLayer("ArcGIS:Topographic", {
      apikey: apiKey,
    }).addTo(map);
    /* ==== Change the map's base layer from the layers menu ==== */
    // layerTypeRef: 'topographic'|'imagery'|'streets'|'gray'
    var changeBaseLayer = function (layerTypeRef) {
      var layerType = "ArcGIS:Topographic"; // default, if layerTypeRef is not valid.
      switch (layerTypeRef) {
        case "topographic":
          layerType = "ArcGIS:Topographic";
          break;
        case "imagery":
          layerType = "ArcGIS:Imagery";
          break;
        case "streets":
          layerType = "ArcGIS:Streets";
          break;
        case "gray":
          layerType = "ArcGIS:DarkGray";
          break;
      }
      if (layer) {
        map.removeLayer(layer);
      }
      layer = L.esri.Vector.vectorBasemapLayer(layerType, { apikey: apiKey });
      map.addLayer(layer);
    };
  } // END ESRI option // default is OSM data-based free providers
  else {
    var layer = L.tileLayer("https://tile.opentopomap.org/{z}/{x}/{y}.png", {
      maxZoom: map_maxzoom,
      attribution:
        'Map data: &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, <a href="http://viewfinderpanoramas.org">SRTM</a> | Map style: &copy; <a href="https://opentopomap.org">OpenTopoMap</a> (<a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA</a>)',
    }).addTo(map);
    /* ==== Change the map's base layer from the layers menu ==== */
    // layerTypeRef: 'topographic'|'imagery'|'streets'|'gray'
    /* I haven't found which map providers to use yet...
  var changeBaseLayer = function(layerTypeRef) {
      
      var layerURL='https://tile.opentopomap.org/{z}/{x}/{y}.png'; // default, if layerTypeRef is not valid.
      var layerAttr='Map data: &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, <a href="http://viewfinderpanoramas.org">SRTM</a> | Map style: &copy; <a href="https://opentopomap.org">OpenTopoMap</a> (<a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA</a>)';
      switch(layerTypeRef)
      {
        case 'topographic':
          layerURL='https://tile.opentopomap.org/{z}/{x}/{y}.png';
          layerAttr='Map data: &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, <a href="http://viewfinderpanoramas.org">SRTM</a> | Map style: &copy; <a href="https://opentopomap.org">OpenTopoMap</a> (<a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA</a>)';
          break;
        case 'imagery':
          layerURL='';
          layerAttr='Map data: &copy; ';
          break;
        case 'streets':
          layerURL='';
          layerAttr='Map data: &copy; ';
          break;
        case 'gray':
          layerURL='';
          layerAttr='Map data: &copy; ';
          break;
      }
      if (layer) {
          map.removeLayer(layer);
      }
      layer = L.tileLayer(layerURL, {maxZoom: map_maxzoom, attribution: layerAttr});
      map.addLayer(layer);
  };
*/
  } // END default option

  // END map-provider specific stuff section.

  // wire up an event handler for the the UI's base layer type selector.
  $(".layers-tab input").on("click", function () {
    changeBaseLayer($(this).val());
  });

  /* ==== Mini map control ==== */
  /* NOTE: this was dropped before go-live, but here's the code...
var osmUrl = '//{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';
var osmAttrib = 'Map data &copy; OpenStreetMap contributors';
var osm2 = new L.TileLayer(osmUrl, {minZoom: 0, maxZoom: map_maxzoom, attribution: osmAttrib });
//var miniMap = new L.Control.MiniMap(osm2, { toggleDisplay: true, position: 'topright' });
//miniMap.addTo(map);
*/

  /* ==== Draw bounding box control ==== */
  // but note that it may not be displayed... see a little further down.
  var drawnItems = new L.FeatureGroup();
  map.addLayer(drawnItems);

  // only support a rectangle draw, and no editing the box.
  var drawControl = new L.Control.Draw({
    position: "topright",
    draw: {
      rect: {
        shapeOptions: {
          color: "green",
        },
      },
      polygon: false,
      circle: false,
      polyline: false,
      marker: false,
      circlemarker: false,
    },
    edit: false,
  });

  // provide that bounding box feature ONLY if searching is allowed (i.e., the search bar is wanted on the display)
  // there was some talk about being able to turn it on and off, so I go ahead and draw it even if I don't display it initially
  if (searchbar) map.addControl(drawControl);

  // helper for makeBox() ... see the makeBox() function below.
  // latLng: 'lat'|'lng'
  // coord:  coordinate value
  var makeBoxPart = function (latLng, coord) {
    if (latLng == "lng") {
      if (coord >= 0) {
        // positive coord = E, negative = W
        return coord + "E";
      } else {
        return (coord *= -1) + "W";
      }
    } else if (latLng == "lat") {
      if (coord >= 0) {
        // positive coord = N, negative = S
        return coord + "N";
      } else {
        return (coord *= -1) + "S";
      }
    }
  };

  // this turns +/- type coords into the NEWS type that are
  // used in the OAI-PMH data provider extended search args
  var makeBox = function (westMost, southMost, eastMost, northMost) {
    return [
      makeBoxPart("lng", westMost),
      makeBoxPart("lat", southMost),
      makeBoxPart("lng", eastMost),
      makeBoxPart("lat", northMost),
    ].join(",");
  };

  // When the user starts to draw a bounding box, erase any others
  // already on the map from previous draws
  map.on(L.Draw.Event.DRAWSTART, function () {
    for (var k in drawnItems._layers) {
      if (drawnItems._layers.hasOwnProperty(k)) {
        drawnItems.removeLayer(drawnItems._layers[k]);
        return;
      }
    }
  });

  // When the user has completed drawing a box, make it a map layer,
  // find its NW and SE corners, and turn those corner coords into
  // search args.
  var box_final = ""; // this will hold the box coords as a search arguments string.
  map.on(L.Draw.Event.CREATED, function (e) {
    box_final = ""; //reset the final box

    // first get the corners...
    // I'm not sure I really want to assume that the first item in the array is what I want,
    // but I can't find documentation on what I'm getting, and I only ever say one element in
    // the top-level array for several different kinds of hits, so ....
    var westMost = e.layer._latlngs[0][0].lng;
    var southMost = e.layer._latlngs[0][0].lat;
    var eastMost = e.layer._latlngs[0][2].lng;
    var northMost = e.layer._latlngs[0][2].lat;

    // turn the corners into a search-ready coordinates string
    box_final = makeBox(westMost, southMost, eastMost, northMost);
    // add the drawn box to the map.
    drawnItems.addLayer(e.layer);
  });

  // when all the drawing hath been completed, doeth the searching.
  map.on(L.Draw.Event.DRAWSTOP, function () {
    doSearch();
  });

  // Move Leaflet draw control to the search form
  // Why is this way down here in the middle of nowhere?  I don't know.
  if (searchbar) {
    var drawControls = $(".leaflet-draw-section");
    //drawControls.detach().appendTo('.draw-control-placeholder');
    var drawTB = drawControls.find(".leaflet-draw-toolbar");
    drawTB.removeClass();
    $(".leaflet-draw.leaflet-control").addClass("opncontrolcontainer");
    $(".leaflet-draw.leaflet-control").removeClass(
      "leaflet-draw-toolbar leaflet-bar leaflet-draw-toolbar-top"
    );

    var drawButton = drawControls.find("a");
    drawButton.removeClass("leaflet-draw-draw-rectangle");
    drawButton.addClass("btn btn-primary draw-bounds-btn");
    drawButton.text("Draw Bounding Box");
  }

  /* ==== Search form ==== */
  // generate the HTML for the given feature's popup.
  // feature: GeoJSON object
  var buildPopupContent = function (feature) {
    var rhtm =
      '<div class="marker-info-content">' +
      "<p><strong>OPN Catalog Info</strong></p>";
    if (feature.properties.Title)
      rhtm += "<p><strong>Title:</strong> " + feature.properties.Title + "</p>";
    if (feature.properties.CreatedBy)
      rhtm +=
        "<p><strong>Creator:</strong> " + feature.properties.CreatedBy + "</p>";
    if (feature.properties.Website) {
      rhtm +=
        '<p style="text-align:center;">' +
        '<a href="' +
        feature.properties.Website +
        '" target="_blank">';
      if (feature.properties.Tile)
        rhtm +=
          '<picture> <source media="(max-width:' +
          smallffthreshold +
          ')" srcset="images/empty.jpg" /><img src="' +
          feature.properties.Tile +
          '" title="Visit Website" /></picture>';
      rhtm += "<br/>Website" + "</a><br />" + "</p>";
    }
    rhtm += "</div>";
    return rhtm;
  };

  // generate the content for a feature's scrolly thumbnail.
  // feature: GeoJSON object
  var buildThumbnail = function (feature) {
    return (
      '<picture> <source media="(max-width:' +
      smallffthreshold +
      ')" srcset="images/empty.jpg" /><img class="thumb" title="' +
      feature.properties.Title +
      '" style="width:105px; height:70px; padding:2px;" src="' +
      feature.properties.Tile +
      '" data-lat="' +
      feature.geometry.coordinates[0][1] +
      '" data-lng="' +
      feature.geometry.coordinates[0][0] +
      '"/></picture>'
    );
  };

  // takes a layers array and finds all in it that have lat/lng coords, and thus could be pinned/clustered
  // In the OLDER Leaflet libraries, the layer of interest had both the _latLng AND _popup attributes on it. In the
  // newer ones, it seems that the _popup (content) is on a layer object that has a _layers attribute, and each of
  // those has _latLng, but NO _popup attribute.  But the rest of the code that deals with these was written
  // for the OLDER library, so I have to get the newer structure to reflect the older.  OK, so I CREATE a _popup
  // attribute on child objects in the _layers attribute that references the same _popup as their parent.  Then I
  // can still return the child objects in outArray and we're golden..., I think.
  // This is all rather kludgey and I'd rather rewrite it, but I'm a one-man show for all things Libraries programming
  // at present, so today is not that day.
  //
  // puts output in the outArray
  // gjlayers: array of GeoJSON layers (objects)
  // outArray: YOU provide an empty array in which to put all the objects that are candidates for clustering (have lat/lng)
  // outerpu: YOU don't provide anything.  This is used on recursive calls to create a _popup attribute on lat/lng objects.
  var getClusterableLayers = function (gjlayers, outArray, outerpu = null) {
    var i;
    var opu = outerpu; // this is dumb, actually.

    for (i = 0; i < gjlayers.length; ++i) {
      if (gjlayers[i].getLatLng) {
        //TODO: here's the prob: now _latlng is not defined on this object, but on a subobject in _layers, which does NOT have the popup part.
        if (!("_popup" in gjlayers[i])) gjlayers[i]._popup = opu; // at this point it has a _latLng, but no _popup, so add the _popup from the parent.
        outArray.push(gjlayers[i]);
      } else {
        if (gjlayers[i].getPopup)
          // no _latLng, so if there is a popup object (i.e., has a getter for one), then get the popup object to pass in the recursive call for the child layer object
          opu = gjlayers[i].getPopup();
        if (gjlayers[i].getLayers)
          // TODO: this is part of the prob: since _layers is defined, this is true, but what I really need is the layer with this getLayers function, which is the one that has the popup part.
          getClusterableLayers(gjlayers[i].getLayers(), outArray, opu);
      }
    }
  };

  // process the search resutls, which are provided as a clump of GeoJSON
  var handleResultData = function (data) {
    // First, make the map a clean slate ...
    // Remove thumbnails from results thumbnails carousel, if any
    $(".thumbnail-carousel-viewport").empty();

    // Remove the drawn bounding box
    box_final = ""; // also clear the bounding box search-formatted coords
    for (var k in drawnItems._layers) {
      if (drawnItems._layers.hasOwnProperty(k)) {
        drawnItems.removeLayer(drawnItems._layers[k]);
      }
    }

    // Clear markers from map
    map.eachLayer(function (layer) {
      if (layer._featureGroup) {
        map.removeLayer(layer);
      }
    });

    // now draw on that slate I just cleaned off ..
    // Create markers and cluster group
    var markers = L.markerClusterGroup({
      spiderfyOnMaxZoom: false,
      disableClusteringAtZoom: map_maxzoom,
      maxZoom: map_maxzoom,
    });
    // load up the scrolly thumbnail bar at the bottom of the view.  The original developer called it a carousel, which is
    // what it is, in UI/web parlance, but I call it a scrolly...
    var geoJsonLayer = L.geoJSON(data, {
      onEachFeature: function (feature, layer) {
        if (!feature.geometry.coordinates[0])
          // a few old items in the repo with multiple points were not indexe right
          return;
        var infoWindow = $(buildPopupContent(feature));
        infoWindow.addClass("hidden");

        var thumb = $('<div class="thumb-wrapper"></div>');
        thumb.append(infoWindow);
        thumb.append(buildThumbnail(feature));

        $(".thumbnail-carousel-viewport").append(thumb);
        layer.bindPopup(buildPopupContent(feature));
      },
    });

    var innerlayers = geoJsonLayer.getLayers(); // innerlayers will be an array of GeoJSON feature objects
    // I need to separate the wheat (has lat/lng coords) from the chaff (we don't know where in the world it is)
    var clusterable = new Array();
    getClusterableLayers(innerlayers, clusterable); // this does the culling
    markers.addLayers(clusterable); // put only the wheat on the map pin(s)

    // A note about markers on the map: they are going to be created as they are displayed -- that is, they aren't pre-created
    // and then displayed later.  That's why the click event handlers contain all the code for generating and displaying them
    // on the map.  I feel like that last sentence is redundant.
    // When a cluster of markers all at the same point is clicked at the max zoom level,
    // instead of spiderfying/pinwheeling the markers, show one popup window
    // containing the content for all features at that point.
    markers.on("clusterclick", function (a) {
      if (map.getZoom() === map.getMaxZoom()) {
        var markers = a.layer.getAllChildMarkers();
        var location = markers[0].getLatLng();
        var popup = L.popup()
          .setLatLng(location)
          .setContent(
            '<div class="marker-info-container">' +
              markers
                .map(function (
                  m // m is a marker object, see comment below in the single items section
                ) {
                  return m._popup.getContent(); // also see comment below in the single items section
                })
                .join("") +
              "</div>"
          );
        popup.openOn(map);
      }
    });
    // this is the promised single items section...
    // do the same for single items at any zoom as for clustered at max zoom
    markers.on("click", function (a) {
      var markers = a.layer.__parent.getAllChildMarkers();
      var location = a.layer.getLatLng();
      var matchcnt = 0;
      var popup = L.popup()
        .setLatLng(location)
        .setContent(
          '<div class="marker-info-container">' +
            markers
              .map(function (
                m // markers is an array, so map() is executing the anonymous function on each element. m will be the value of the element.  This confused me at first, because I had completely forgotten about Javascripts map() function, and thought map() was doing something to a Leaflet object. -_-
              ) {
                var oll = m.getLatLng();
                if (location.lat === oll.lat && location.lng === oll.lng) {
                  ++matchcnt;

                  var pu = m._popup; // because I kluge the popup onto the object I really want it on in getClusterableLayers(), I'm fetching it in the same way, instead of using getPopup(), to remind me something odd went on.
                  return pu.getContent(); // could also do pu._content, but this seems more future-safe.
                } else return "";
              })
              .join("") +
            "Items at this pin: " +
            matchcnt +
            "</div>"
        );
      popup.openOn(map);
    });
    // Add markers to map, because ... I don't know ... you just do, even though openOn added each popup, but I didn't
    // write it and this is also what examples do.  I guess I'm adding the markers, which are technically not the popups.
    map.addLayer(markers);
    map.fitBounds(markers.getBounds()); // zoom to the max allowed level that fits all the markers

    // When a feature's thumbnail is clicked in the scrolly, pan to its marker.
    $("img.thumb").click(function () {
      var lat = $(this).data("lat");
      var lng = $(this).data("lng");
      // http://stackoverflow.com/questions/12735303/how-to-change-the-map-center-in-leaflet
      map.setView(new L.LatLng(lat, lng), map_maxzoom);
    });

    // You have to click a map marker to see info for that point, BUT you only have to
    // hover on the item in the thumbnail scrolly...
    if (!$("html").hasClass("touch")) {
      $(".thumb-wrapper").hover(
        function () {
          // Manually setting the height is necessary for Safari. SCH: this is an old, original developer comment, so I don't know if it is true anymore
          var infoWindow = $(this).find(".marker-info-content");
          infoWindow.removeClass("hidden");
          $(this).css("height", infoWindow.height() + 70 + "px");
        },
        function () {
          $(this).css("height", "70px");
          $(this).find(".marker-info-content").addClass("hidden");
        }
      );
    }
    // if a zoom was provided in the query args, use it.
    if (searchzoom !== null) map.setZoom(searchzoom);

    // if the query args indicate a search carousel, include it. Even if this is a re-search, it would have been hidden if the
    // reset button was clicked and the map cleared.
    if (searchcarousel) $(".thumbnail-carousel").removeClass("hidden");
  };

  // perform the search against the local OAI-PMH data provider's custom extended protocol interface...
  var doSearch = function () {
    var pagesize; // max results for the search to return

    if ($("#num-results").val() == "All") {
      pagesize = 0;
    } else {
      pagesize = $("#num-results").val();
    }
    if (pagesize === null)
      // choose a default if not selected
      pagesize = 200;
    if (pgsize != null)
      // let the query arg override the nav bar
      pagesize = pgsize;

    var kwLength;
    var searchUrl; // the base of the URL is set near the top of this code file.  This will hold the fully-constructed search URL.
    // if no bounding box is set, then search the globe.
    if (box_final === "") {
      kwLength = $("#keywords").val().length;
      if (kwLength < 2) {
        alert("Keywords or a bounding box are required for a search");
        return;
      }
      // here's some samples of bounding searches in different ways that didn't always work as expected...
      //searchUrl = searchBase + '?verb=pointsearch&metadataPrefix=geojson&keywords=' + $('#keywords').val() + '&pagesize=' + pagesize;
      //searchUrl = searchBase + '?verb=pointsearch&metadataPrefix=geojson&keywords=' + $('#keywords').val() + '&box=120W,30N,120E,30S&pagesize=' + pagesize;
      //searchUrl = searchBase + '?verb=pointsearch&metadataPrefix=geojson&keywords=' + $('#keywords').val() + '&box=180W,90N,180E,90S&pagesize=' + pagesize;
      //searchUrl = searchBase + '?verb=pointsearch&metadataPrefix=geojson&keywords=' + $('#keywords').val() + '&box=179W,0N,179E,0S&pagesize=' + pagesize;
      // This is what finally got settled on by me....
      searchUrl =
        searchBase +
        "?verb=pointsearch&metadataPrefix=geojson&keywords=" +
        encodeURIComponent($("#keywords").val()) +
        "&box=179W,90S,180E,90N&pagesize=" +
        pagesize;
    } // ... otherwise search within the provided box.
    else {
      kwLength = $("#keywords").val().length;
      if (kwLength < 2) {
        searchUrl =
          searchBase +
          "?verb=pointsearch&metadataPrefix=geojson&box=" +
          box_final +
          "&pagesize=" +
          pagesize;
      } else {
        searchUrl =
          searchBase +
          "?verb=pointsearch&metadataPrefix=geojson&box=" +
          box_final +
          "&keywords=" +
          encodeURIComponent($("#keywords").val()) +
          "&pagesize=" +
          pagesize;
      }
    }
    // Disable form while I do my trans-network search thing ...
    $("#search-btn")
      .attr("disabled", "disabled")
      .find(".text")
      .html("Searching...");
    $("#keywords").attr("disabled", "disabled");
    $(".draw-bounds-btn").attr("disabled", "disabled");
    //drawButton.attr('disabled', 'disabled');

    // Query OPN
    $.getJSON(searchUrl, function (data) {
      // Re-enable form
      $("#search-btn").removeAttr("disabled").find(".text").html("Search");
      $("#keywords").removeAttr("disabled");
      $(".draw-bounds-btn").removeAttr("disabled");
      //drawButton.removeAttr('disabled');

      // say some things about boundary cases...
      if (data.features.length < 1) {
        alert("No matching results");
        return;
      }

      if (data.features.length >= 1000) {
        alert(
          "Your search has returned at least 1000 results, which may slow page performance. " +
            "It may be helpful to use different keywords or to draw a smaller bounding box."
        );
      }

      // process the results.
      handleResultData(data);
    });
  };

  // on-click/form submt event handlers for the search button
  $("#search-btn").on("click", function (e) {
    e.preventDefault();
    doSearch();
    $(".navbar-collapse").collapse("hide");
  });

  $("#search-form").on("submit", function (e) {
    e.preventDefault();
    doSearch();
    $(".navbar-collapse").collapse("hide");
  });

  // click event handler for the search reset button
  $("#reset-btn").on("click", function (e) {
    e.preventDefault();

    // Clear saved bounding box search args string
    box_final = "";

    // Remove drawn bounding box
    for (var k in drawnItems._layers) {
      if (drawnItems._layers.hasOwnProperty(k)) {
        drawnItems.removeLayer(drawnItems._layers[k]);
        return;
      }
    }

    // clear the search expression text box
    $("#keywords").val("");

    // Now pan the map back to initial position.
    map.setView(
      new L.LatLng((init_map_lat = 34.2), init_map_lng),
      init_mapzoom
    );

    // Remove all the markers.
    map.eachLayer(function (layer) {
      if (layer._featureGroup) {
        map.removeLayer(layer);
      }
    });

    // Hide the thumnbail slider, because it is now irrelevant until the next search completes.
    $(".thumbnail-carousel").addClass("hidden");
  });

  /* ==== Thumbnail slider (aka carousel, aka scrolly) ==== */

  // Scroll left and right in search results
  var scrollResults = function (right) {
    var slider = $(".thumbnail-carousel-viewport");
    var thumbWidth = 105;
    var numThumbs = slider.find("img").length;

    slider = slider.get(0);

    var currentIndex =
      (slider.scrollLeft - (Math.abs(slider.scrollLeft) % thumbWidth)) /
      thumbWidth;
    var nextIndex;
    if (right) {
      nextIndex = currentIndex + 1;
      if (nextIndex >= numThumbs) {
        nextIndex = numThumbs - 1;
      }
    } else {
      nextIndex = currentIndex - 1;
      if (nextIndex < 0) {
        nextIndex = 0;
      }
    }

    slider.scrollLeft = nextIndex * thumbWidth;
  };
  $(".thumb-slider-left-btn").on("click", scrollResults.bind(this, false));
  $(".thumb-slider-right-btn").on("click", scrollResults.bind(this, true));

  if (numqargs == 0) return;

  if (kwds !== null) {
    //document.getElementById('keywords').value=kwds;
    $("#keywords").val(kwds);
    doSearch();
    $(".navbar-collapse").collapse("hide");
  }
});